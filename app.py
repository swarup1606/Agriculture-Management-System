import streamlit as st

# Must be the first Streamlit command
st.set_page_config(
    page_title="AgroBloom-AI",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Now import other libraries
import os
import numpy as np
import pandas as pd
import requests
import json
import cv2
from PIL import Image
from io import BytesIO
from streamlit_extras.colored_header import colored_header
from streamlit_extras.metric_cards import style_metric_cards
from streamlit_lottie import st_lottie
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import joblib
from dotenv import load_dotenv
import google.generativeai as genai
from disease import analyze_plant_disease
from PIL import UnidentifiedImageError
import ee
import geemap
import folium
from streamlit_folium import folium_static
from datetime import datetime, timedelta

# -------------------- Multilingual Setup --------------------
# Define a dictionary with translations for English, Hindi, and Marathi.
translations = {
    "en": {
        "sidebar_title": "üåæ AgroBloom AI",
        "home_title": "üå± AgroBloom AI",
        "welcome_message": "Welcome to AgroBloom AI - Your intelligent farming companion! Harness the power of artificial intelligence to optimize your agricultural operations, increase crop yield, and make data-driven decisions for sustainable farming.",
        "weather_report": "Weather Report for",
        "farming_advisory": "Farming Advisory",
        "soil_moisture_map": "Soil Moisture Map",
        "current_conditions": "Current Conditions",
        "select_language": "Select Language",
        "home": "Home",
        "weather_forecasting": "Weather Forecasting",
        "irrigation_management": "Irrigation Management",
        "soil_health_analysis": "Soil Health Analysis",
        "crop_recommendation": "Crop Recommendation",
        "disease_detection": "Disease Detection",
        "navigation": "Navigation",
        "smart_weather_insights": "Smart Weather Insights",
        "smart_weather_desc": "Get real-time weather data and farming advice based on your location.",
        "ai_irrigation_system": "AI-Powered Irrigation System",
        "ai_irrigation_desc": "Optimize water usage with predictive analytics and real-time soil moisture data.",
        "soil_health_dashboard": "Soil Health Dashboard",
        "soil_health_desc": "Analyze soil parameters and get actionable insights for improvement.",
        "disease_detection_title": "Plant Disease Detection",
        "disease_detection_desc": "Upload plant images to detect diseases and receive treatment recommendations.",
        "join_revolution": "Join the Agricultural Revolution",
        "start_journey": "Start your journey towards smarter farming today!",
        "enter_location": "Enter Location",
        "get_weather_analysis": "Get Weather Analysis",
        "fetching_weather_data": "Fetching weather data...",
        "temperature": "Temperature",
        "humidity": "Humidity",
        "precipitation": "Precipitation",
        "wind_speed": "Wind Speed",
        "frost_alert": "Frost alert: Protect sensitive crops from low temperatures.",
        "cool_weather": "Cool weather: Suitable for most crops with proper care.",
        "optimal_conditions": "Optimal conditions: Ideal weather for crop growth.",
        "heat_stress": "Heat stress: Ensure proper irrigation to mitigate high temperatures.",
        "failed_to_retrieve_weather_data": "Failed to retrieve weather data. Please check the location and try again.",
        "smart_irrigation_system": "Smart Irrigation System",
        "irrigation_desc": "Use AI to manage irrigation efficiently.",
        "field_parameters": "Field Parameters",
        "select_region_category": "Select Region Category",
        "select_location": "Select Location",
        "use_custom_location": "Use Custom Location",
        "enter_custom_location": "Enter Custom Location",
        "crop_type": "Crop Type",
        "optimal_moisture_tip": "Optimal moisture varies by crop type.",
        "calculate_irrigation": "Calculate Irrigation Needs",
        "analyzing_field_conditions": "Analyzing field conditions...",
        "irrigation_plan": "Irrigation Plan",
        "irrigation_analysis": "Irrigation Analysis",
        "soil_moisture": "Soil Moisture",
        "soil_moisture_level": "Soil Moisture Level",
        "crop_specific_analysis": "Crop-Specific Analysis",
        "optimal_soil_moisture_range": "Optimal Soil Moisture Range",
        "below_optimal": "Soil moisture is below optimal for {crop_type}. Consider irrigating.",
        "above_optimal": "Soil moisture is above optimal for {crop_type}. Reduce irrigation.",
        "within_optimal": "Soil moisture is within optimal range for {crop_type}.",
        "water_conservation_impact": "Water Conservation Impact",
        "monthly_savings": "Monthly Savings",
        "water_saved": "Water Saved",
        "cost_reduction": "Cost Reduction",
        "environmental_impact": "Environmental Impact",
        "carbon_footprint_reduction": "Carbon Footprint Reduction",
        "sustainability_score": "Sustainability Score",
        "how_to_use": "How to Use",
        "input_soil_test_results": "Input your soil test results below.",
        "click_analyze_soil_health": "Click 'Analyze Soil Health' to process the data.",
        "receive_recommendations": "Receive tailored recommendations for soil improvement.",
        "soil_parameters": "Soil Parameters",
        "soil_ph": "Soil pH",
        "nitrogen": "Nitrogen (kg/ha)",
        "phosphorus": "Phosphorus (kg/ha)",
        "potassium": "Potassium (kg/ha)",
        "organic_matter": "Organic Matter (%)",
        "analyze_soil_health": "Analyze Soil Health",
        "analyzing_soil_composition": "Analyzing soil composition...",
        "analysis_results": "Analysis Results",
        "recommended_actions": "Recommended Actions",
        "apply_organic_compost": "Apply organic compost to improve organic matter.",
        "ideal_soil_ph": "Adjust pH to 6.0-7.5 if needed.",
        "ideal_nitrogen": "Maintain nitrogen levels between 20-50 kg/ha.",
        "ideal_phosphorus": "Maintain phosphorus levels between 15-40 kg/ha.",
        "ideal_potassium": "Maintain potassium levels between 15-40 kg/ha.",
        "retest_soil": "Retest soil after 3 months.",
        "smart_crop_advisor": "Smart Crop Advisor",
        "crop_advisor_desc": "Get crop recommendations based on soil conditions.",
        "field_conditions": "Field Conditions",
        "get_crop_recommendations": "Get Crop Recommendations",
        "analyzing_optimal_crops": "Analyzing optimal crops...",
        "recommended_crop": "Recommended Crop",
        "expected_yield": "Expected Yield",
        "best_season": "Best Season",
        "upload_plant_image_desc": "Upload an image of your plant for analysis.",
        "click_analyze_disease": "Click 'Analyze Disease' to start the process.",
        "receive_disease_recommendations": "Receive disease detection results and recommendations.",
        "upload_plant_image": "Upload Plant Image",
        "uploaded_image": "Uploaded Image",
        "analyze_disease": "Analyze Disease",
        "analyzing_disease": "Analyzing disease...",
        "disease_detection_results": "Disease Detection Results",
        "consult_expert": "Consult a local agricultural expert for confirmation.",
        "apply_treatment": "Apply recommended treatment as soon as possible.",
        "monitor_health": "Monitor plant health over the next few weeks.",
        "invalid_image_error": "Invalid image file. Please upload a valid JPG or PNG image.",
        "error_occurred": "An error occurred"
    },
    "hi": {
        "sidebar_title": "üåæ ‡§è‡§ó‡•ç‡§∞‡•ã‡§¨‡•ç‡§≤‡•Ç‡§Æ ‡§è‡§Ü‡§à",
        "home_title": "üå± ‡§è‡§ó‡•ç‡§∞‡•ã‡§¨‡•ç‡§≤‡•Ç‡§Æ ‡§è‡§Ü‡§à",
        "welcome_message": "‡§è‡§ó‡•ç‡§∞‡•ã‡§¨‡•ç‡§≤‡•Ç‡§Æ ‡§è‡§Ü‡§à ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à - ‡§Ü‡§™‡§ï‡§æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§ï‡•É‡§∑‡§ø ‡§∏‡§æ‡§•‡•Ä! ‡§ï‡•É‡§§‡•ç‡§∞‡§ø‡§Æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§§‡•ç‡§§‡§æ ‡§ï‡•Ä ‡§∂‡§ï‡•ç‡§§‡§ø ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§Ö‡§™‡§®‡•Ä ‡§ï‡•É‡§∑‡§ø ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§ï‡§∞‡§®‡•á, ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§â‡§™‡§ú ‡§¨‡§¢‡§º‡§æ‡§®‡•á ‡§î‡§∞ ‡§∏‡§§‡§§ ‡§ï‡•É‡§∑‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•á‡§ü‡§æ-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç‡•§",
        "weather_report": "‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•å‡§∏‡§Æ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü",
        "farming_advisory": "‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡§æ‡§π",
        "soil_moisture_map": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä ‡§ï‡§æ ‡§Æ‡§æ‡§®‡§ö‡§ø‡§§‡•ç‡§∞",
        "current_conditions": "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç",
        "select_language": "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç",
        "home": "‡§π‡•ã‡§Æ",
        "weather_forecasting": "‡§Æ‡•å‡§∏‡§Æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®",
        "irrigation_management": "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®",
        "soil_health_analysis": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "crop_recommendation": "‡§´‡§∏‡§≤ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂",
        "disease_detection": "‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§®",
        "navigation": "‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§®",
        "smart_weather_insights": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø",
        "smart_weather_desc": "‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§Æ‡•å‡§∏‡§Æ ‡§°‡•á‡§ü‡§æ ‡§î‡§∞ ‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡§æ‡§π ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "ai_irrigation_system": "‡§è‡§Ü‡§à-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä",
        "ai_irrigation_desc": "‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§î‡§∞ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§®‡§Æ‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡§≤ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•ã ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "soil_health_dashboard": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
        "soil_health_desc": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§Æ‡§æ‡§™‡§¶‡§Ç‡§°‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "disease_detection_title": "‡§™‡•å‡§ß‡•á ‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§®",
        "disease_detection_desc": "‡§™‡•å‡§ß‡•ã‡§Ç ‡§ï‡•Ä ‡§õ‡§µ‡§ø‡§Ø‡§æ‡§Ç ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§∞‡•ã‡§ó‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§®‡•á ‡§î‡§∞ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§",
        "join_revolution": "‡§ï‡•É‡§∑‡§ø ‡§ï‡•ç‡§∞‡§æ‡§Ç‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã‡§Ç",
        "start_journey": "‡§Ü‡§ú ‡§π‡•Ä ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•Ä ‡§ì‡§∞ ‡§Ö‡§™‡§®‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç!",
        "enter_location": "‡§∏‡•ç‡§•‡§æ‡§® ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
        "get_weather_analysis": "‡§Æ‡•å‡§∏‡§Æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
        "fetching_weather_data": "‡§Æ‡•å‡§∏‡§Æ ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à...",
        "temperature": "‡§§‡§æ‡§™‡§Æ‡§æ‡§®",
        "humidity": "‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ",
        "precipitation": "‡§µ‡§∞‡•ç‡§∑‡§æ",
        "wind_speed": "‡§π‡§µ‡§æ ‡§ï‡•Ä ‡§ó‡§§‡§ø",
        "frost_alert": "‡§™‡§æ‡§≤‡§æ ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: ‡§∏‡§Ç‡§µ‡•á‡§¶‡§®‡§∂‡•Ä‡§≤ ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡§Æ ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§∏‡•á ‡§¨‡§ö‡§æ‡§è‡§Ç‡•§",
        "cool_weather": "‡§†‡§Ç‡§°‡§æ ‡§Æ‡•å‡§∏‡§Æ: ‡§â‡§ö‡§ø‡§§ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§Ç‡§∂ ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§‡•§",
        "optimal_conditions": "‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç: ‡§´‡§∏‡§≤ ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§Æ‡•å‡§∏‡§Æ‡•§",
        "heat_stress": "‡§ó‡§∞‡•ç‡§Æ‡•Ä ‡§§‡§®‡§æ‡§µ: ‡§â‡§ö‡•ç‡§ö ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§ï‡•ã ‡§ï‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§ö‡§ø‡§§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "failed_to_retrieve_weather_data": "‡§Æ‡•å‡§∏‡§Æ ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§î‡§∞ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "smart_irrigation_system": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä",
        "irrigation_desc": "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡•ã ‡§ï‡•Å‡§∂‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§Ü‡§à ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
        "field_parameters": "‡§ñ‡•á‡§§ ‡§ï‡•á ‡§Æ‡§æ‡§™‡§¶‡§Ç‡§°",
        "select_region_category": "‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç",
        "select_location": "‡§∏‡•ç‡§•‡§æ‡§® ‡§ö‡•Å‡§®‡•á‡§Ç",
        "use_custom_location": "‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç",
        "enter_custom_location": "‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
        "crop_type": "‡§´‡§∏‡§≤ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞",
        "optimal_moisture_tip": "‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§®‡§Æ‡•Ä ‡§´‡§∏‡§≤ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§≠‡§ø‡§®‡•ç‡§® ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§",
        "calculate_irrigation": "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç",
        "analyzing_field_conditions": "‡§ñ‡•á‡§§ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à...",
        "irrigation_plan": "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§Ø‡•ã‡§ú‡§®‡§æ",
        "irrigation_analysis": "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "soil_moisture": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä",
        "soil_moisture_level": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä ‡§∏‡•ç‡§§‡§∞",
        "crop_specific_analysis": "‡§´‡§∏‡§≤-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "optimal_soil_moisture_range": "‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§®‡§Æ‡•Ä ‡§∞‡•á‡§Ç‡§ú",
        "below_optimal": "{crop_type} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§π‡•à‡•§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "above_optimal": "{crop_type} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§π‡•à‡•§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "within_optimal": "{crop_type} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§∞‡•á‡§Ç‡§ú ‡§Æ‡•á‡§Ç ‡§π‡•à‡•§",
        "water_conservation_impact": "‡§ú‡§≤ ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ",
        "monthly_savings": "‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ö‡§§",
        "water_saved": "‡§™‡§æ‡§®‡•Ä ‡§¨‡§ö‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ",
        "cost_reduction": "‡§≤‡§æ‡§ó‡§§ ‡§Æ‡•á‡§Ç ‡§ï‡§Æ‡•Ä",
        "environmental_impact": "‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ",
        "carbon_footprint_reduction": "‡§ï‡§æ‡§∞‡•ç‡§¨‡§® ‡§´‡•Å‡§ü‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§Æ‡•á‡§Ç ‡§ï‡§Æ‡•Ä",
        "sustainability_score": "‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ ‡§∏‡•ç‡§ï‡•ã‡§∞",
        "how_to_use": "‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç",
        "input_soil_test_results": "‡§®‡•Ä‡§ö‡•á ‡§Ö‡§™‡§®‡•á ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§",
        "click_analyze_soil_health": "‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
        "receive_recommendations": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "soil_parameters": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§Æ‡§æ‡§™‡§¶‡§Ç‡§°",
        "soil_ph": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•Ä‡§è‡§ö",
        "nitrogen": "‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® (‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞)",
        "phosphorus": "‡§´‡•â‡§∏‡•ç‡§´‡•ã‡§∞‡§∏ (‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞)",
        "potassium": "‡§™‡•ã‡§ü‡•à‡§∂‡§ø‡§Ø‡§Æ (‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞)",
        "organic_matter": "‡§ú‡•à‡§µ‡§ø‡§ï ‡§™‡§¶‡§æ‡§∞‡•ç‡§• (%)",
        "analyze_soil_health": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "analyzing_soil_composition": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à...",
        "analysis_results": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        "recommended_actions": "‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å",
        "apply_organic_compost": "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶ ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§ú‡•à‡§µ‡§ø‡§ï ‡§™‡§¶‡§æ‡§∞‡•ç‡§• ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§π‡•ã‡•§",
        "ideal_soil_ph": "‡§Ø‡§¶‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•ã ‡§§‡•ã ‡§™‡•Ä‡§è‡§ö ‡§ï‡•ã 6.0-7.5 ‡§§‡§ï ‡§∏‡§Æ‡§æ‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "ideal_nitrogen": "‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•ã 20-50 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞ ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç‡•§",
        "ideal_phosphorus": "‡§´‡•â‡§∏‡•ç‡§´‡•ã‡§∞‡§∏ ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•ã 15-40 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞ ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç‡•§",
        "ideal_potassium": "‡§™‡•ã‡§ü‡•à‡§∂‡§ø‡§Ø‡§Æ ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•ã 15-40 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞ ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç‡•§",
        "retest_soil": "3 ‡§Æ‡§π‡•Ä‡§®‡•á ‡§¨‡§æ‡§¶ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "smart_crop_advisor": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§´‡§∏‡§≤ ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞",
        "crop_advisor_desc": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§´‡§∏‡§≤ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "field_conditions": "‡§ñ‡•á‡§§ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Å",
        "get_crop_recommendations": "‡§´‡§∏‡§≤ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
        "analyzing_optimal_crops": "‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à...",
        "recommended_crop": "‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§´‡§∏‡§≤",
        "expected_yield": "‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§â‡§™‡§ú",
        "best_season": "‡§∏‡§∞‡•ç‡§µ‡§∂‡•ç‡§∞‡•á‡§∑‡•ç‡§† ‡§Æ‡•å‡§∏‡§Æ",
        "upload_plant_image_desc": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•á ‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
        "click_analyze_disease": "‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è '‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
        "receive_disease_recommendations": "‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§® ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§î‡§∞ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "upload_plant_image": "‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "uploaded_image": "‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à ‡§õ‡§µ‡§ø",
        "analyze_disease": "‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "analyzing_disease": "‡§∞‡•ã‡§ó ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à...",
        "disease_detection_results": "‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§® ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        "consult_expert": "‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "apply_treatment": "‡§ú‡§≤‡•ç‡§¶ ‡§∏‡•á ‡§ú‡§≤‡•ç‡§¶ ‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡•á‡§Ç‡•§",
        "monitor_health": "‡§Ö‡§ó‡§≤‡•á ‡§ï‡•Å‡§õ ‡§π‡§´‡•ç‡§§‡•ã‡§Ç ‡§§‡§ï ‡§™‡•å‡§ß‡•á ‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç‡•§",
        "invalid_image_error": "‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§õ‡§µ‡§ø ‡§´‡§º‡§æ‡§á‡§≤‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§Æ‡§æ‡§®‡•ç‡§Ø JPG ‡§Ø‡§æ PNG ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
        "error_occurred": "‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à"
    },
    "mr": {
        "sidebar_title": "üåæ ‡§è‡§ó‡•ç‡§∞‡•ã‡§¨‡•ç‡§≤‡•Ç‡§Æ ‡§è‡§Ü‡§à",
        "home_title": "üå± ‡§è‡§ó‡•ç‡§∞‡•ã‡§¨‡•ç‡§≤‡•Ç‡§Æ ‡§è‡§Ü‡§à",
        "welcome_message": "‡§è‡§ó‡•ç‡§∞‡•ã‡§¨‡•ç‡§≤‡•Ç‡§Æ ‡§è‡§Ü‡§à ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Ü‡§™‡§≤‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§Ü‡§π‡•á - ‡§Ü‡§™‡§≤‡§æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§∂‡•á‡§§‡•Ä ‡§∏‡§æ‡§•‡•Ä! ‡§ï‡•É‡§§‡•ç‡§∞‡§ø‡§Æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§§‡•ç‡§§‡§æ ‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§ï‡•É‡§∑‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§Ç‡§ö‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§µ‡§æ‡§¢‡§µ‡§æ, ‡§™‡•Ä‡§ï ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§µ‡§æ‡§¢‡§µ‡§æ ‡§Ü‡§£‡§ø ‡§∂‡§æ‡§∂‡•ç‡§µ‡§§ ‡§∂‡•á‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§°‡•á‡§ü‡§æ-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§ò‡•ç‡§Ø‡§æ.",
        "weather_report": "‡§∏‡§æ‡§†‡•Ä ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§Ö‡§π‡§µ‡§æ‡§≤",
        "farming_advisory": "‡§∂‡•á‡§§‡•Ä ‡§∏‡§≤‡•ç‡§≤‡§æ",
        "soil_moisture_map": "‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§®‡§ï‡§æ‡§∂‡§æ",
        "current_conditions": "‡§∏‡§ß‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä",
        "select_language": "‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ",
        "home": "‡§Æ‡•Å‡§ñ‡§™‡•É‡§∑‡•ç‡§†",
        "weather_forecasting": "‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§Ö‡§Ç‡§¶‡§æ‡§ú",
        "irrigation_management": "‡§∏‡§ø‡§Ç‡§ö‡§® ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®",
        "soil_health_analysis": "‡§Æ‡§æ‡§§‡•Ä ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "crop_recommendation": "‡§™‡•Ä‡§ï ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏",
        "disease_detection": "‡§∞‡•ã‡§ó ‡§∂‡•ã‡§ß",
        "navigation": "‡§®‡•á‡§µ‡•ç‡§π‡§ø‡§ó‡•á‡§∂‡§®",
        "smart_weather_insights": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡•Ä",
        "smart_weather_desc": "‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§∏‡•ç‡§•‡§æ‡§®‡§æ‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§µ‡•á‡§≥ ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§°‡•á‡§ü‡§æ ‡§Ü‡§£‡§ø ‡§∂‡•á‡§§‡•Ä ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§æ.",
        "ai_irrigation_system": "‡§è‡§Ü‡§Ø-‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∏‡§ø‡§Ç‡§ö‡§® ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä",
        "ai_irrigation_desc": "‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§∏‡•Ç‡§ö‡§ï ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Ü‡§£‡§ø ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§µ‡•á‡§≥ ‡§Æ‡§æ‡§§‡•Ä ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§°‡•á‡§ü‡§æ ‡§∏‡§π ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§ï‡§∞‡§æ.",
        "soil_health_dashboard": "‡§Æ‡§æ‡§§‡•Ä ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§°‡•Ö‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
        "soil_health_desc": "‡§Æ‡§æ‡§§‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§™‡§¶‡§Ç‡§°‡§æ‡§Ç‡§ö‡•á ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§∏‡•Å‡§ß‡§æ‡§∞‡§£‡•á‡§∏‡§æ‡§†‡•Ä ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡•Ä ‡§Æ‡§ø‡§≥‡§µ‡§æ.",
        "disease_detection_title": "‡§µ‡§®‡§∏‡•ç‡§™‡§§‡•Ä ‡§∞‡•ã‡§ó ‡§∂‡•ã‡§ß",
        "disease_detection_desc": "‡§∞‡•ã‡§ó ‡§∂‡•ã‡§ß‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§£‡§ø ‡§â‡§™‡§ö‡§æ‡§∞ ‡§∂‡§ø‡§´‡§æ‡§∞‡§∂‡•Ä ‡§Æ‡§ø‡§≥‡§µ‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§µ‡§®‡§∏‡•ç‡§™‡§§‡•Ä‡§Ç‡§ö‡•Ä ‡§õ‡§æ‡§Ø‡§æ‡§ö‡§ø‡§§‡•ç‡§∞‡•á ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ.",
        "join_revolution": "‡§ï‡•É‡§∑‡•Ä ‡§ï‡•ç‡§∞‡§æ‡§Ç‡§§‡•Ä‡§§ ‡§∏‡§æ‡§Æ‡•Ä‡§≤ ‡§µ‡•ç‡§π‡§æ",
        "start_journey": "‡§Ü‡§ú‡§ö ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∂‡•á‡§§‡•Ä‡§ï‡§°‡•á ‡§Ü‡§™‡§≤‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ!",
        "enter_location": "‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ",
        "get_weather_analysis": "‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Æ‡§ø‡§≥‡§µ‡§æ",
        "fetching_weather_data": "‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§°‡•á‡§ü‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§§ ‡§Ü‡§π‡•á...",
        "temperature": "‡§§‡§æ‡§™‡§Æ‡§æ‡§®",
        "humidity": "‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ",
        "precipitation": "‡§™‡§∞‡•ç‡§ú‡§®‡•ç‡§Ø‡§Æ‡§æ‡§®",
        "wind_speed": "‡§µ‡§æ‡§±‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§µ‡•á‡§ó",
        "frost_alert": "‡§π‡§ø‡§Æ ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: ‡§∏‡§Ç‡§µ‡•á‡§¶‡§®‡§∂‡•Ä‡§≤ ‡§™‡§ø‡§ï‡§æ‡§Ç‡§®‡§æ ‡§ï‡§Æ‡•Ä ‡§§‡§æ‡§™‡§Æ‡§æ‡§®‡§æ‡§™‡§æ‡§∏‡•Ç‡§® ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£ ‡§¶‡•ç‡§Ø‡§æ.",
        "cool_weather": "‡§•‡§Ç‡§° ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®: ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡§æ‡§≥‡§ú‡•Ä‡§∏‡§π ‡§¨‡§π‡•Å‡§§‡•á‡§ï ‡§™‡§ø‡§ï‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•ã‡§ó‡•ç‡§Ø.",
        "optimal_conditions": "‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä: ‡§™‡•Ä‡§ï ‡§µ‡§æ‡§¢‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®.",
        "heat_stress": "‡§â‡§∑‡•ç‡§£‡§§‡§æ ‡§§‡§£‡§æ‡§µ: ‡§â‡§ö‡•ç‡§ö ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§ï‡§Æ‡•Ä ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§ø‡§Ç‡§ö‡§® ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§æ.",
        "failed_to_retrieve_weather_data": "‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§°‡•á‡§ü‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§§‡§™‡§æ‡§∏‡§æ ‡§Ü‡§£‡§ø ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ.",
        "smart_irrigation_system": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡§ø‡§Ç‡§ö‡§® ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä",
        "irrigation_desc": "‡§∏‡§ø‡§Ç‡§ö‡§® ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∑‡§Æ‡§§‡•á‡§®‡•á ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§è‡§Ü‡§Ø‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ ‡§ï‡§∞‡§æ.",
        "field_parameters": "‡§∂‡•á‡§§ ‡§Æ‡§æ‡§™‡§¶‡§Ç‡§°",
        "select_region_category": "‡§™‡•ç‡§∞‡§¶‡•á‡§∂ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§®‡§ø‡§µ‡§°‡§æ",
        "select_location": "‡§∏‡•ç‡§•‡§æ‡§® ‡§®‡§ø‡§µ‡§°‡§æ",
        "use_custom_location": "‡§∏‡§æ‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§∏‡•ç‡§•‡§æ‡§® ‡§µ‡§æ‡§™‡§∞‡§æ",
        "enter_custom_location": "‡§∏‡§æ‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ",
        "crop_type": "‡§™‡•Ä‡§ï ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞",
        "optimal_moisture_tip": "‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§™‡•Ä‡§ï ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¨‡§¶‡§≤‡§§‡•á.",
        "calculate_irrigation": "‡§∏‡§ø‡§Ç‡§ö‡§®‡§æ‡§ö‡•Ä ‡§ó‡§∞‡§ú ‡§Æ‡•ã‡§ú‡§æ",
        "analyzing_field_conditions": "‡§∂‡•á‡§§‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä‡§ö‡•á ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á...",
        "irrigation_plan": "‡§∏‡§ø‡§Ç‡§ö‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ",
        "irrigation_analysis": "‡§∏‡§ø‡§Ç‡§ö‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "soil_moisture": "‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ",
        "soil_moisture_level": "‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§™‡§æ‡§§‡§≥‡•Ä",
        "crop_specific_analysis": "‡§™‡•Ä‡§ï-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "optimal_soil_moisture_range": "‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§Æ‡§æ‡§§‡•Ä ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä",
        "below_optimal": "{crop_type} ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ï‡§Æ‡•Ä ‡§Ü‡§π‡•á. ‡§∏‡§ø‡§Ç‡§ö‡§®‡§æ‡§ö‡§æ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡§æ.",
        "above_optimal": "{crop_type} ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§Ü‡§π‡•á. ‡§∏‡§ø‡§Ç‡§ö‡§® ‡§ï‡§Æ‡•Ä ‡§ï‡§∞‡§æ.",
        "within_optimal": "{crop_type} ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä‡§§ ‡§Ü‡§π‡•á.",
        "water_conservation_impact": "‡§ú‡§≤ ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ",
        "monthly_savings": "‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ö‡§§",
        "water_saved": "‡§™‡§æ‡§£‡•Ä ‡§µ‡§æ‡§ö‡§≤‡•á",
        "cost_reduction": "‡§ñ‡§∞‡•ç‡§ö‡§æ‡§§ ‡§ï‡§™‡§æ‡§§",
        "environmental_impact": "‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ",
        "carbon_footprint_reduction": "‡§ï‡§æ‡§∞‡•ç‡§¨‡§® ‡§´‡•Ç‡§ü‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§ï‡§Æ‡•Ä ‡§ï‡§∞‡§£‡•á",
        "sustainability_score": "‡§∂‡§æ‡§∂‡•ç‡§µ‡§§‡§§‡§æ ‡§ó‡•Å‡§£",
        "how_to_use": "‡§ï‡§∏‡•á ‡§µ‡§æ‡§™‡§∞‡§æ‡§µ‡•á",
        "input_soil_test_results": "‡§ñ‡§æ‡§≤‡•Ä ‡§Ü‡§™‡§≤‡•á ‡§Æ‡§æ‡§§‡•Ä ‡§ö‡§æ‡§ö‡§£‡•Ä ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ.",
        "click_analyze_soil_health": "‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä '‡§Æ‡§æ‡§§‡•Ä ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£' ‡§µ‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ.",
        "receive_recommendations": "‡§Æ‡§æ‡§§‡•Ä ‡§∏‡•Å‡§ß‡§æ‡§∞‡§£‡•á‡§∏‡§æ‡§†‡•Ä ‡§∏‡§æ‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§∂‡§ø‡§´‡§æ‡§∞‡§∂‡•Ä ‡§Æ‡§ø‡§≥‡§µ‡§æ.",
        "soil_parameters": "‡§Æ‡§æ‡§§‡•Ä ‡§Æ‡§æ‡§™‡§¶‡§Ç‡§°",
        "soil_ph": "‡§Æ‡§æ‡§§‡•Ä ‡§™‡•Ä‡§è‡§ö",
        "nitrogen": "‡§®‡§æ‡§Ø‡§ü‡•ç‡§∞‡•ã‡§ú‡§® (‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡§∞)",
        "phosphorus": "‡§´‡•â‡§∏‡•ç‡§´‡§∞‡§∏ (‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡§∞)",
        "potassium": "‡§™‡•ã‡§ü‡•Ö‡§∂‡§ø‡§Ø‡§Æ (‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡§∞)",
        "organic_matter": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§™‡§¶‡§æ‡§∞‡•ç‡§• (%)",
        "analyze_soil_health": "‡§Æ‡§æ‡§§‡•Ä ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "analyzing_soil_composition": "‡§Æ‡§æ‡§§‡•Ä ‡§∏‡§Ç‡§∞‡§ö‡§®‡•á‡§ö‡•á ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á...",
        "analysis_results": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        "recommended_actions": "‡§∂‡§ø‡§´‡§æ‡§∞‡§∏ ‡§ï‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§ï‡•É‡§§‡•Ä",
        "apply_organic_compost": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ñ‡§æ‡§¶ ‡§≤‡§æ‡§µ‡§æ ‡§ú‡•á‡§£‡•á‡§ï‡§∞‡•Ç‡§® ‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§™‡§¶‡§æ‡§∞‡•ç‡§•‡§æ‡§§ ‡§∏‡•Å‡§ß‡§æ‡§∞‡§£‡§æ ‡§π‡•ã‡§à‡§≤.",
        "ideal_soil_ph": "‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§™‡•Ä‡§è‡§ö 6.0-7.5 ‡§™‡§∞‡•ç‡§Ø‡§Ç‡§§ ‡§∏‡§Æ‡§æ‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§∞‡§æ.",
        "ideal_nitrogen": "‡§®‡§æ‡§Ø‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§™‡§æ‡§§‡§≥‡•Ä 20-50 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡§∞ ‡§¶‡§∞‡§Æ‡•ç‡§Ø‡§æ‡§® ‡§†‡•á‡§µ‡§æ.",
        "ideal_phosphorus": "‡§´‡•â‡§∏‡•ç‡§´‡§∞‡§∏ ‡§™‡§æ‡§§‡§≥‡•Ä 15-40 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡§∞ ‡§¶‡§∞‡§Æ‡•ç‡§Ø‡§æ‡§® ‡§†‡•á‡§µ‡§æ.",
        "ideal_potassium": "‡§™‡•ã‡§ü‡•Ö‡§∂‡§ø‡§Ø‡§Æ ‡§™‡§æ‡§§‡§≥‡•Ä 15-40 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡§∞ ‡§¶‡§∞‡§Æ‡•ç‡§Ø‡§æ‡§® ‡§†‡•á‡§µ‡§æ.",
        "retest_soil": "3 ‡§Æ‡§π‡§ø‡§®‡•ç‡§Ø‡§æ‡§Ç‡§®‡§Ç‡§§‡§∞ ‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§ö‡§æ‡§ö‡§£‡•Ä ‡§ï‡§∞‡§æ.",
        "smart_crop_advisor": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§™‡•Ä‡§ï ‡§∏‡§≤‡•ç‡§≤‡§æ‡§ó‡§æ‡§∞",
        "crop_advisor_desc": "‡§Æ‡§æ‡§§‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§™‡•Ä‡§ï ‡§∂‡§ø‡§´‡§æ‡§∞‡§∂‡•Ä ‡§Æ‡§ø‡§≥‡§µ‡§æ.",
        "field_conditions": "‡§∂‡•á‡§§ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä",
        "get_crop_recommendations": "‡§™‡•Ä‡§ï ‡§∂‡§ø‡§´‡§æ‡§∞‡§∂‡•Ä ‡§Æ‡§ø‡§≥‡§µ‡§æ",
        "analyzing_optimal_crops": "‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§™‡§ø‡§ï‡§æ‡§Ç‡§ö‡•á ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á...",
        "recommended_crop": "‡§∂‡§ø‡§´‡§æ‡§∞‡§∏ ‡§ï‡•á‡§≤‡•á‡§≤‡•á ‡§™‡•Ä‡§ï",
        "expected_yield": "‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®",
        "best_season": "‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§π‡§Ç‡§ó‡§æ‡§Æ",
        "upload_plant_image_desc": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§µ‡§®‡§∏‡•ç‡§™‡§§‡•Ä‡§ö‡•á ‡§ö‡§ø‡§§‡•ç‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ.",
        "click_analyze_disease": "‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä '‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£' ‡§µ‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ.",
        "receive_disease_recommendations": "‡§∞‡•ã‡§ó ‡§∂‡•ã‡§ß ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§Ü‡§£‡§ø ‡§∂‡§ø‡§´‡§æ‡§∞‡§∂‡•Ä ‡§Æ‡§ø‡§≥‡§µ‡§æ.",
        "upload_plant_image": "‡§µ‡§®‡§∏‡•ç‡§™‡§§‡•Ä ‡§ö‡§ø‡§§‡•ç‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ",
        "uploaded_image": "‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•á‡§≤‡•á‡§≤‡•á ‡§ö‡§ø‡§§‡•ç‡§∞",
        "analyze_disease": "‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "analyzing_disease": "‡§∞‡•ã‡§ó‡§æ‡§ö‡•á ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á...",
        "disease_detection_results": "‡§∞‡•ã‡§ó ‡§∂‡•ã‡§ß ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        "consult_expert": "‡§™‡•Å‡§∑‡•ç‡§ü‡•Ä‡§ï‡§∞‡§£‡§æ‡§∏‡§æ‡§†‡•Ä ‡§∏‡•ç‡§•‡§æ‡§®‡§ø‡§ï ‡§ï‡•É‡§∑‡•Ä ‡§§‡§ú‡•ç‡§û‡§æ‡§ö‡§æ ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§ò‡•ç‡§Ø‡§æ.",
        "apply_treatment": "‡§∂‡§ï‡•ç‡§Ø ‡§§‡§ø‡§§‡§ï‡•ç‡§Ø‡§æ ‡§≤‡§µ‡§ï‡§∞ ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏ ‡§ï‡•á‡§≤‡•á‡§≤‡•á ‡§â‡§™‡§ö‡§æ‡§∞ ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡§æ.",
        "monitor_health": "‡§™‡•Å‡§¢‡•Ä‡§≤ ‡§ï‡§æ‡§π‡•Ä ‡§Ü‡§†‡§µ‡§°‡•ç‡§Ø‡§æ‡§Ç‡§™‡§∞‡•ç‡§Ø‡§Ç‡§§ ‡§µ‡§®‡§∏‡•ç‡§™‡§§‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§≤‡§ï‡•ç‡§∑ ‡§†‡•á‡§µ‡§æ.",
        "invalid_image_error": "‡§Ö‡§µ‡•à‡§ß ‡§ö‡§ø‡§§‡•ç‡§∞ ‡§´‡§æ‡§á‡§≤. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•à‡§ß JPG ‡§ï‡§ø‡§Ç‡§µ‡§æ PNG ‡§ö‡§ø‡§§‡•ç‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ.",
        "error_occurred": "‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä ‡§Ü‡§≤‡•Ä"
    }
}
# Global variable to store the current language code
current_language = "en"

# Helper function to return translated text for a given key
def tr(key):
    return translations.get(current_language, translations["en"]).get(key, key)


# Initialize Earth Engine with error handling
def initialize_ee():
    try:
        # Try to initialize with default credentials
        project_id = os.getenv("GEE_PROJECT_ID", "agrobloom-ai")  # Get from environment or use default
        ee.Initialize(project=project_id)
    except Exception as e:
        try:
            # If failed, try to authenticate and initialize
            ee.Authenticate()
            project_id = os.getenv("GEE_PROJECT_ID", "agrobloom-ai")
            ee.Initialize(project=project_id)
        except Exception as auth_e:
            st.error(f"""
                Error initializing Google Earth Engine. Please follow these steps:
                1. Run 'earthengine authenticate' in your terminal
                2. Create a Google Cloud Project and enable Earth Engine
                3. Set up credentials for Earth Engine
                4. Add your project ID to the .env file as GEE_PROJECT_ID
                
                Error details: {str(auth_e)}
            """)
            return False
    return True

# Initialize Earth Engine
ee_initialized = initialize_ee()

# Function to get soil moisture data from Google Earth Engine
def get_soil_moisture(lat, lon):
    if not ee_initialized:
        st.error("Earth Engine not initialized. Cannot fetch soil moisture data.")
        return None
        
    try:
        # Create a point and buffer it to create a small region
        point = ee.Geometry.Point([lon, lat])
        region = point.buffer(1000)  # 1km buffer
        
        # Get the current date and the date 7 days ago
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        # Load the ERA5-Land hourly data
        collection = ee.ImageCollection('ECMWF/ERA5_LAND/HOURLY')\
            .filterDate(start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'))\
            .select('volumetric_soil_water_layer_1')  # This is the correct band name for soil moisture
            
        # Check if we have any images
        collection_size = collection.size().getInfo()
        if collection_size == 0:
            st.warning("No recent soil moisture data available. Extending search to last 30 days.")
            start_date = end_date - timedelta(days=30)
            collection = ee.ImageCollection('ECMWF/ERA5_LAND/HOURLY')\
                .filterDate(start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'))\
                .select('volumetric_soil_water_layer_1')
            collection_size = collection.size().getInfo()
            
            if collection_size == 0:
                st.error("No soil moisture data available for this location in the last 30 days.")
                return None
        
        try:
            # Get the mean value over the region for each image
            def get_region_mean(image):
                mean = image.reduceRegion(
                    reducer=ee.Reducer.mean(),
                    geometry=region,
                    scale=1000
                )
                return image.set('mean', mean.get('volumetric_soil_water_layer_1'))

            # Map over the collection and get mean values
            collection_with_means = collection.map(get_region_mean)
            
            # Get the most recent non-null value
            sorted_collection = collection_with_means.sort('system:time_start', False)
            recent_value = sorted_collection.first().get('mean').getInfo()
            
            if recent_value is None:
                st.error("No valid soil moisture data available for this location.")
                return None
                
            # Get the date range for reference
            st.info(f"Soil moisture data from: {start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}")
                
            # ERA5-Land volumetric soil water is in m¬≥/m¬≥, convert to percentage
            return round(recent_value * 100, 2)
            
        except Exception as sample_error:
            st.error(f"Error processing soil moisture data: {str(sample_error)}")
            return None
            
    except Exception as e:
        st.error(f"Error fetching soil moisture data: {str(e)}")
        return None

# Function to display soil moisture map
def display_soil_moisture_map(lat, lon, soil_moisture):
    try:
        # Create a map centered at the location
        m = folium.Map(location=[lat, lon], zoom_start=10)
        
        # Add a marker with soil moisture information
        folium.Marker(
            [lat, lon],
            popup=f"Soil Moisture: {soil_moisture}%",
            icon=folium.Icon(color='green', icon='info-sign')
        ).add_to(m)
        
        # Add a circle to represent the area of measurement
        folium.Circle(
            location=[lat, lon],
            radius=2000,  # 2km radius
            color='blue',
            fill=True,
            popup='Measurement Area'
        ).add_to(m)
        
        # Display the map in Streamlit
        folium_static(m)
    except Exception as e:
        st.error(f"Error displaying map: {str(e)}")

# Function to get coordinates from city name
def get_coordinates(city):
    try:
        # Using OpenStreetMap Nominatim API for geocoding
        url = f"https://nominatim.openstreetmap.org/search?city={city}&format=json"
        headers = {
            'User-Agent': 'AgroBloom-AI/1.0'  # Add user agent to comply with Nominatim usage policy
        }
        response = requests.get(url, headers=headers)
        data = response.json()
        
        if data:
            lat = float(data[0]['lat'])
            lon = float(data[0]['lon'])
            return lat, lon
        return None, None
    except Exception as e:
        st.error(f"Error getting coordinates: {str(e)}")
        return None, None

# Load environment variables
load_dotenv()
api_key = os.getenv("API_KEY")
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Load CSS
def local_css(file_name):
    try:
        with open(os.path.join(os.path.dirname(__file__), file_name)) as f:
            st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
    except Exception as e:
        st.warning(f"Could not load CSS file {file_name}: {e}")

local_css("style.css")

# -------------------- Load Lottie Animations --------------------
def load_lottieurl(url: str):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

lottie_agri = load_lottieurl("https://assets1.lottiefiles.com/packages/lf20_ygiuluqn.json")

# -------------------- FUNCTIONS --------------------

# Function to get weather data from API
def get_weather_data(city):
    api_key = os.getenv("API_KEY")
    base_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(base_url)
    data = response.json()
    return data

# Function to load CSV data
def load_data():
    try:
        soil_data = pd.read_csv("soil_analysis_data.csv")
        crop_production_data = pd.read_csv("crop_production_data.csv")
        return soil_data, crop_production_data
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return None, None

# Function to analyze soil health
def analyze_soil_health(pH, nitrogen, phosphorus, potassium, organic_matter):
    healthy = {'pH': (6.0, 7.5), 'nitrogen': (20, 50), 'phosphorus': (15, 40), 'potassium': (15, 40), 'organic_matter': (3, 6)}
    moderate = {'pH': (5.5, 6.0), 'nitrogen': (10, 20), 'phosphorus': (10, 15), 'potassium': (10, 15), 'organic_matter': (2, 3)}

    pH_status = 'Healthy' if healthy['pH'][0] <= pH <= healthy['pH'][1] else ('Moderate' if moderate['pH'][0] <= pH <= moderate['pH'][1] else 'Unhealthy')
    nitrogen_status = 'Healthy' if healthy['nitrogen'][0] <= nitrogen <= healthy['nitrogen'][1] else ('Moderate' if moderate['nitrogen'][0] <= nitrogen <= moderate['nitrogen'][1] else 'Unhealthy')
    phosphorus_status = 'Healthy' if healthy['phosphorus'][0] <= phosphorus <= healthy['phosphorus'][1] else ('Moderate' if moderate['phosphorus'][0] <= phosphorus <= moderate['phosphorus'][1] else 'Unhealthy')
    potassium_status = 'Healthy' if healthy['potassium'][0] <= potassium <= healthy['potassium'][1] else ('Moderate' if moderate['potassium'][0] <= potassium <= moderate['potassium'][1] else 'Unhealthy')
    organic_matter_status = 'Healthy' if healthy['organic_matter'][0] <= organic_matter <= healthy['organic_matter'][1] else ('Moderate' if moderate['organic_matter'][0] <= organic_matter <= moderate['organic_matter'][1] else 'Unhealthy')

    overall_health = {
        'pH': pH_status,
        'Nitrogen': nitrogen_status,
        'Phosphorus': phosphorus_status,
        'Potassium': potassium_status,
        'Organic Matter': organic_matter_status
    }

    return overall_health

# Function to process satellite images (example placeholder)
def process_satellite_image(image_path):
    image = cv2.imread(image_path)
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return gray_image

# Function to train the crop recommendation model
def train_crop_recommendation_model(soil_data, crop_production_data):
    merged_data = pd.merge(soil_data, crop_production_data, on='District')
    features = merged_data[['pH Level', 'Nitrogen Content (kg/ha)', 'Phosphorus Content (kg/ha)', 'Potassium Content (kg/ha)', 'Organic Matter (%)']]
    target = merged_data['Crop']

    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    st.write(f"Crop recommendation model accuracy: {accuracy * 100:.2f}%")

    joblib.dump(model, "crop_recommendation_model.pkl")
    st.write("Crop recommendation model trained and saved.")
    return model

# Function to load the trained crop recommendation model
def load_crop_recommendation_model():
    try:
        model = joblib.load("crop_recommendation_model.pkl")
        st.write("Crop recommendation model loaded successfully.")
        return model
    except FileNotFoundError:
        st.write("No trained crop recommendation model found. Please train a new model first.")
        return None

# Function to recommend crops based on soil data using the trained model
def recommend_crops_with_model(model, soil_data_row):
    prediction = model.predict([soil_data_row])
    return prediction[0]

# Function to get historical weather data for training the irrigation model (example data)
def get_historical_weather_data():
    return pd.DataFrame({
        'temperature': [22, 24, 20, 23, 25],
        'humidity': [60, 65, 70, 55, 50],
        'precipitation': [5, 0, 10, 0, 0],
        'soil_moisture': [30, 28, 35, 33, 30]
    })

# Function to train the irrigation model
def train_irrigation_model():
    data = get_historical_weather_data()
    X = data[['temperature', 'humidity', 'precipitation']]
    y = data['soil_moisture']

    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X, y)

    joblib.dump(model, "irrigation_model.pkl")
    st.write("Irrigation model trained and saved.")
    return model

# Function to load the irrigation model
def load_irrigation_model():
    try:
        model = joblib.load("irrigation_model.pkl")
        st.write("Irrigation model loaded successfully.")
        return model
    except FileNotFoundError:
        st.write("No trained irrigation model found. Please train a new model first.")
        return None

# Function for irrigation management with predictive analytics
def irrigation_management(weather_data, soil_moisture):
    model = load_irrigation_model()
    
    if model:
        temp = weather_data['main']['temp']
        humidity = weather_data['main']['humidity']
        precipitation = weather_data.get('rain', {}).get('1h', 0)

        prediction = model.predict([[temp, humidity, precipitation]])
        predicted_soil_moisture = prediction[0]

        st.write(f"Current Soil Moisture: {soil_moisture}%")
        st.write(f"Predicted Soil Moisture: {predicted_soil_moisture:.2f}%")

        if soil_moisture < predicted_soil_moisture:
            st.warning("Irrigation needed to reach optimal soil moisture levels.")
        else:
            st.success("Soil moisture is sufficient; no additional irrigation required.")
    else:
        st.error("Unable to perform irrigation management without a trained model.")

# -------------------- Main App --------------------

def main():
    global current_language

    # Language selection
    language = st.sidebar.selectbox(tr("select_language"), ["English", "‡§π‡§ø‡§Ç‡§¶‡•Ä", "‡§Æ‡§∞‡§æ‡§†‡•Ä"])
    if language == "English":
        current_language = "en"
    elif language == "‡§π‡§ø‡§Ç‡§¶‡•Ä":
        current_language = "hi"
    elif language == "‡§Æ‡§∞‡§æ‡§†‡•Ä":
        current_language = "mr"

    # Sidebar
    st.sidebar.title(tr("sidebar_title"))
    menu = [
        tr("home"),
        tr("weather_forecasting"),
        tr("irrigation_management"),
        tr("soil_health_analysis"),
        tr("crop_recommendation"),
        tr("disease_detection")
    ]
    choice = st.sidebar.radio(tr("navigation"), menu)

    # Home Page
    if choice == tr("home"):
        st.markdown(f"<h1 style='text-align: center; color: #2E8B57;'>{tr('home_title')}</h1>", unsafe_allow_html=True)
        st.markdown("---")

        col1, col2 = st.columns([2, 1])
        with col1:
            st.markdown(
                f"""
                <div style='text-align: justify; font-size: 20px;'>
                    {tr('welcome_message')}
                </div>
                """, unsafe_allow_html=True
            )
            st.markdown("<br>", unsafe_allow_html=True)

            features = [
                {"icon": "üå§Ô∏è", "title": tr("smart_weather_insights"), "desc": tr("smart_weather_desc")},
                {"icon": "üíß", "title": tr("ai_irrigation_system"), "desc": tr("ai_irrigation_desc")},
                {"icon": "üìä", "title": tr("soil_health_dashboard"), "desc": tr("soil_health_desc")},
                {"icon": "üåø", "title": tr("disease_detection_title"), "desc": tr("disease_detection_desc")}
            ]

            for feat in features:
                st.markdown(
                    f"""
                    <div class="feature-card">
                        <span class="feature-icon">{feat['icon']}</span>
                        <h3 class="feature-title">{feat['title']}</h3>
                        <p class="feature-desc">{feat['desc']}</p>
                    </div>
                    """, unsafe_allow_html=True
                )

        with col2:
            st_lottie(lottie_agri, height=400, key="agri")

        st.markdown("---")
        st.markdown(
            f"""
            <div style='text-align: center; padding: 20px;'>
                <h3>üåç {tr('join_revolution')}</h3>
                <p>{tr('start_journey')}</p>
            </div>
            """, unsafe_allow_html=True
        )

    # Weather Forecasting
    elif choice == tr("weather_forecasting"):
        colored_header(
            label=tr("weather_report"),
            description=tr("smart_weather_desc"),
            color_name="green-70"
        )

        col1, col2 = st.columns([1, 2])
        with col1:
            city = st.text_input(f"üìç {tr('enter_location')}", "London")
            if st.button(tr("get_weather_analysis"), use_container_width=True):
                with st.spinner(tr("fetching_weather_data")):
                    weather_data = get_weather_data(city)
                    if weather_data and weather_data.get("main"):
                        with col2:
                            st.subheader(f"{tr('weather_report')} {city}")
                            cols = st.columns(4)
                            cols[0].metric(tr("temperature"), f"{weather_data['main']['temp']}¬∞C",
                                           help="Optimal range for most crops: 15-30¬∞C")
                            cols[1].metric(tr("humidity"), f"{weather_data['main']['humidity']}%",
                                           "Ideal range: 40-80%")
                            cols[2].metric(tr("precipitation"),
                                           f"{weather_data.get('rain', {}).get('1h', 0)}mm",
                                           "Next 3 hours")
                            cols[3].metric(tr("wind_speed"),
                                           f"{weather_data['wind']['speed']} m/s",
                                           "Wind direction")
                            style_metric_cards()

                            temp = weather_data['main']['temp']
                            if temp < 10:
                                advisory = tr("frost_alert")
                            elif 10 <= temp < 20:
                                advisory = tr("cool_weather")
                            elif 20 <= temp < 30:
                                advisory = tr("optimal_conditions")
                            else:
                                advisory = tr("heat_stress")

                            st.markdown(
                                f"""
                                <div class="advisory-box">
                                    <h3>üå± {tr('farming_advisory')}</h3>
                                    <p>{advisory}</p>
                                </div>
                                """, unsafe_allow_html=True
                            )
                    else:
                        st.error(tr("failed_to_retrieve_weather_data"))

    # Irrigation Management
    elif choice == tr("irrigation_management"):
        colored_header(
            label=tr("smart_irrigation_system"),
            description=tr("irrigation_desc"),
            color_name="blue-70"
        )

        col1, col2 = st.columns([1, 2])
        with col1:
            st.subheader(tr("field_parameters"))

            region_category = st.selectbox(tr("select_region_category"), ["India", "United States", "Europe"])
            city = st.selectbox(f"üìç {tr('select_location')}", suggested_regions[region_category])

            use_custom_location = st.checkbox(tr("use_custom_location"))
            if use_custom_location:
                city = st.text_input(tr("enter_custom_location"))

            crop_type = st.selectbox(tr("crop_type"), ["Wheat", "Corn", "Rice", "Soybean"])
            st.caption(tr("optimal_moisture_tip"))

            if st.button(tr("calculate_irrigation"), use_container_width=True):
                with st.spinner(tr("analyzing_field_conditions")):
                    lat, lon = get_coordinates(city)
                    if lat and lon:
                        soil_moisture = get_soil_moisture(lat, lon)
                        if soil_moisture is not None:
                            weather_data = get_weather_data(city)
                            if weather_data and weather_data.get("main"):
                                with col2:
                                    st.subheader(tr("irrigation_plan"))

                                    st.write(f"### üó∫Ô∏è {tr('soil_moisture_map')}")
                                    display_soil_moisture_map(lat, lon, soil_moisture)

                                    st.write(f"### üìä {tr('current_conditions')}")
                                    cols = st.columns(3)
                                    cols[0].metric(
                                        tr("soil_moisture"),
                                        f"{soil_moisture}%",
                                        delta="Real-time data",
                                        help="Real-time soil moisture from satellite data"
                                    )
                                    cols[1].metric(
                                        tr("temperature"),
                                        f"{weather_data['main']['temp']}¬∞C",
                                        help=tr("current_temperature")
                                    )
                                    cols[2].metric(
                                        tr("humidity"),
                                        f"{weather_data['main']['humidity']}%",
                                        help=tr("current_humidity")
                                    )

                                    st.write(f"### üíß {tr('irrigation_analysis')}")
                                    irrigation_management(weather_data, soil_moisture)

                                    st.markdown(
                                        f"""
                                        <div style="margin: 20px 0;">
                                            <h4>{tr('soil_moisture_level')}</h4>
                                            <div class="moisture-gauge" style="
                                                background: #f0f2f6;
                                                border-radius: 10px;
                                                height: 30px;
                                                width: 100%;
                                                overflow: hidden;
                                            ">
                                                <div style="
                                                    background: linear-gradient(90deg, #2E8B57, #3CB371);
                                                    width: {soil_moisture}%;
                                                    height: 100%;
                                                    display: flex;
                                                    align-items: center;
                                                    justify-content: center;
                                                    color: white;
                                                    transition: width 0.5s ease-in-out;
                                                ">
                                                    {soil_moisture}%
                                                </div>
                                            </div>
                                        </div>
                                        """, unsafe_allow_html=True
                                    )

                                    optimal_moisture = {
                                        "Wheat": (30, 50),
                                        "Corn": (35, 55),
                                        "Rice": (60, 85),
                                        "Soybean": (40, 60)
                                    }
                                    crop_range = optimal_moisture[crop_type]
                                    st.write(f"### üåæ {tr('crop_specific_analysis')} {crop_type}")
                                    st.write(f"{tr('optimal_soil_moisture_range')}: {crop_range[0]}% - {crop_range[1]}%")

                                    if soil_moisture < crop_range[0]:
                                        st.warning(tr("below_optimal").format(crop_type=crop_type))
                                    elif soil_moisture > crop_range[1]:
                                        st.warning(tr("above_optimal").format(crop_type=crop_type))
                                    else:
                                        st.success(tr("within_optimal").format(crop_type=crop_type))

                                    st.markdown(
                                        f"""
                                        <div style="
                                            background: #f8f9fa;
                                            border-radius: 10px;
                                            padding: 20px;
                                            margin-top: 20px;
                                        ">
                                            <h3>{tr('water_conservation_impact')}</h3>
                                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                                                <div>
                                                    <h4>{tr('monthly_savings')}</h4>
                                                    <p>{tr('water_saved')}: <strong>12,500L</strong></p>
                                                    <p>{tr('cost_reduction')}: <strong>15%</strong></p>
                                                </div>
                                                <div>
                                                    <h4>{tr('environmental_impact')}</h4>
                                                    <p>{tr('carbon_footprint_reduction')}: <strong>25%</strong></p>
                                                    <p>{tr('sustainability_score')}: <strong>8.5/10</strong></p>
                                                </div>
                                            </div>
                                        </div>
                                        """, unsafe_allow_html=True
                                    )

    # Soil Health Analysis
    elif choice == tr("soil_health_analysis"):
        colored_header(
            label=tr("soil_health_dashboard"),
            description=tr("soil_health_desc"),
            color_name="orange-70"
        )

        with st.expander(f"üîç {tr('how_to_use')}"):
            st.markdown(
                f"""
                1. {tr('input_soil_test_results')}<br>
                2. {tr('click_analyze_soil_health')}<br>
                3. {tr('receive_recommendations')}
                """, unsafe_allow_html=True
            )

        col1, col2 = st.columns([1, 2])
        with col1:
            st.subheader(tr("soil_parameters"))
            pH = st.slider(tr("soil_ph"), 0.0, 14.0, 7.0, 0.1)
            nitrogen = st.number_input(tr("nitrogen"), min_value=0.0, value=20.0)
            phosphorus = st.number_input(tr("phosphorus"), min_value=0.0, value=15.0)
            potassium = st.number_input(tr("potassium"), min_value=0.0, value=15.0)
            organic_matter = st.slider(tr("organic_matter"), 0.0, 100.0, 5.0)

            if st.button(tr("analyze_soil_health"), use_container_width=True):
                with st.spinner(tr("analyzing_soil_composition")):
                    health_status = analyze_soil_health(pH, nitrogen, phosphorus, potassium, organic_matter)
                    with col2:
                        st.subheader(tr("analysis_results"))
                        st.markdown(
                            f"""
                            <div class="gauge-container">
                                <p><strong>pH:</strong> {health_status['pH']}</p>
                                <p><strong>{tr('nitrogen')}:</strong> {health_status['Nitrogen']}</p>
                                <p><strong>{tr('phosphorus')}:</strong> {health_status['Phosphorus']}</p>
                                <p><strong>{tr('potassium')}:</strong> {health_status['Potassium']}</p>
                                <p><strong>{tr('organic_matter')}:</strong> {health_status['Organic Matter']}</p>
                            </div>
                            """, unsafe_allow_html=True
                        )
                        st.markdown(
                            f"""
                            <div class="recommendation-box">
                                <h3>{tr('recommended_actions')}</h3>
                                <ul>
                                    <li>{tr('apply_organic_compost')}</li>
                                    <li>{tr('ideal_soil_ph')}</li>
                                    <li>{tr('ideal_nitrogen')}</li>
                                    <li>{tr('ideal_phosphorus')}</li>
                                    <li>{tr('ideal_potassium')}</li>
                                    <li>{tr('retest_soil')}</li>
                                </ul>
                            </div>
                            """, unsafe_allow_html=True
                        )

    # Crop Recommendation
    elif choice == tr("crop_recommendation"):
        colored_header(
            label=tr("smart_crop_advisor"),
            description=tr("crop_advisor_desc"),
            color_name="violet-70"
        )

        soil_data, crop_production_data = load_data()
        if soil_data is not None and crop_production_data is not None:
            col1, col2 = st.columns([1, 2])
            with col1:
                st.subheader(tr("field_conditions"))
                pH = st.slider(tr("soil_ph"), 0.0, 14.0, 7.0, 0.1)
                nitrogen = st.number_input(tr("nitrogen"), min_value=0.0, value=20.0)
                phosphorus = st.number_input(tr("phosphorus"), min_value=0.0, value=15.0)
                potassium = st.number_input(tr("potassium"), min_value=0.0, value=15.0)
                organic_matter = st.slider(tr("organic_matter"), 0.0, 100.0, 5.0)

                if st.button(tr("get_crop_recommendations"), use_container_width=True):
                    with st.spinner(tr("analyzing_optimal_crops")):
                        model = load_crop_recommendation_model()
                        if model:
                            soil_data_row = [pH, nitrogen, phosphorus, potassium, organic_matter]
                            recommended_crop = recommend_crops_with_model(model, soil_data_row)
                            with col2:
                                st.markdown(
                                    f"""
                                    <div class="crop-card">
                                        <h2>{tr('recommended_crop')}</h2>
                                        <h1 class="crop-name">üåΩ {recommended_crop}</h1>
                                        <div class="crop-stats">
                                            <div>
                                                <h3>{tr('expected_yield')}</h3>
                                                <p>12-15 tons/ha</p>
                                            </div>
                                            <div>
                                                <h3>{tr('best_season')}</h3>
                                                <p>Kharif/Rabi</p>
                                            </div>
                                        </div>
                                    </div>
                                    """, unsafe_allow_html=True
                                )

    # Disease Detection
    elif choice == tr("disease_detection"):
        colored_header(
            label=tr("disease_detection_title"),
            description=tr("disease_detection_desc"),
            color_name="red-70"
        )

        with st.expander(f"üîç {tr('how_to_use')}"):
            st.markdown(
                f"""
                1. {tr('upload_plant_image_desc')}<br>
                2. {tr('click_analyze_disease')}<br>
                3. {tr('receive_disease_recommendations')}
                """, unsafe_allow_html=True
            )

        col1, col2 = st.columns([1, 2])
        with col1:
            uploaded_file = st.file_uploader(tr("upload_plant_image"), type=["jpg", "png"])
            if uploaded_file:
                try:
                    image = Image.open(BytesIO(uploaded_file.read()))
                    st.image(image, caption=tr("uploaded_image"), use_column_width=True)

                    if st.button(tr("analyze_disease"), use_container_width=True):
                        with st.spinner(tr("analyzing_disease")):
                            disease_info = analyze_plant_disease(image)
                            with col2:
                                st.subheader(tr("disease_detection_results"))
                                st.write(disease_info)
                                st.markdown(
                                    f"""
                                    <div class="recommendation-box">
                                        <h3>{tr('recommended_actions')}</h3>
                                        <ul>
                                            <li>{tr('consult_expert')}</li>
                                            <li>{tr('apply_treatment')}</li>
                                            <li>{tr('monitor_health')}</li>
                                        </ul>
                                    </div>
                                    """, unsafe_allow_html=True
                                )
                except UnidentifiedImageError:
                    st.error(tr("invalid_image_error"))
                except Exception as e:
                    st.error(f"{tr('error_occurred')}: {str(e)}")

if __name__ == "__main__":
    main()
